%article
  .wrapped
    %fieldset.lesson--standards
      %legend
        %h3 How does this align to standards?
        %small * Mandatory information

      - if @standards_array.present?
        - @standards_array.each_with_index do |standard, index |
          .lesson--standard-wrapper
            .lesson--standard-header
              %h4
                ="Standard #{index+1}"
              .actions
                -#= link_to 'Delete', '#'
                = button_tag 'Delete Standard', class: "delete-standard", data: { order: index}
            .field-group
              %label
                Standard name
                %small What is the overarching standard
              .field-wrapper
                = select(:standard_name, :standard_id, options_for_select(@standards, standard["name"]))
            .field-group
              %label
                Description
                %small Add one or more
              .field-wrapper
                -# @TODO ican container should be there only if a given value is selected from the previous select.
                .clone-container
                  - if standard["descriptions"].present?
                    - standard["descriptions"].each do |desc|
                      %textarea.textarea--short{{data: { control:'key'} }}
                        = desc
                  - else
                    %textarea.textarea--short{{data: { control:'key'} }}
                %small Press ↵ Return to add
      - else
        .lesson--standard-wrapper
          .lesson--standard-header
            %h4
              Standard 1
            .actions
              -#= link_to 'Delete', '#'
              = button_tag 'Delete Standard', class: "delete-standard", data: { order: 0}
          .field-group
            %label
              Standard name
              %small What is the overarching standard
            .field-wrapper
              = select(:standard_name, :standard_id, options_for_select(@standards))
              -#need to take some time and see how to pass lessons: { standards: [{:name, :description}] }
          .field-group
            %label
              Description
              %small Add one or more
            .field-wrapper

              .field--ican-container
                -# @TODO ican container should be there only if a given value is selected from the previous select.
                = select(:standard_name, :standard_id, ['un','dos','tres'])

              .clone-container
                %textarea.textarea--short{{data: { control:'key'} } }
              %small Press ↵ Return to add




      %h3 New standard
      = button_tag 'Add new Standard', class: 'button button--highlight add-standard'

  %footer
    .wrapped
      =link_to 'Back to overview', lesson_new_path(id: @lesson_obj.id, form_step:1), class: 'button button--call ajax-standards'
      =link_to 'Add some details', lesson_new_path(id: @lesson_obj.id, form_step:3), class: 'button button--call ajax-standards'


:javascript
     /**
     * AJAX BELOW
     */
    $('.ajax-standards').hover(function() {

        console.log('submit standards');
        parameters = {};
        standards_data = [];
        $('.lesson--standard-wrapper').each(function(){
            $(this).find('select').val();
            descriptions_data = [];
            $(this).find('textarea').each(function(){
              if ( $(this).val() != "" ){
                descriptions_data.push($(this).val());
              }
            });
            standards_data.push(
                {
                    name: $(this).find('select').val(),
                    descriptions:  descriptions_data
                }
            )
        });
        parameters = {lesson: {standards: standards_data}};
        console.log(parameters);



        $.ajax({
            type: "PUT",
            url: "/lessons/#{@lesson_obj.id}",
            // The key needs to match your method's input parameter (case-sensitive).
            data: JSON.stringify(parameters),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function(data){console.log(data);},
            failure: function(errMsg) {
                alert(errMsg);
            }
        });
    });