.form-step
  .wrapped#steps-wrapper
    %fieldset
      %legend
        %h3 How does this lesson unfold?
        %small * Mandatory information


    - @steps.each_with_index do |s,i|
      .lesson-step{data: {id: s.id} }
        .heading-wrapper
          %h4
            = "Step #{i+1}"
          = button_tag 'Remove Step', class: "button remove-step", data:{index: i}
        %fieldset
          %legend
            %h4 Instructions

          .field-group
            %label
              Summary
              %small Add one or more
            .field-wrapper
              = text_field(:step, :summary, class:'input--large', value: s.summary, data:{index: i})

          .field-group
            %label
              Time needed
              %small A reference on the time that will take to complete the step
              -# in minutes
            .field-wrapper
              %input{type: 'text', id: 'duration', data: {index: i}, readonly: 'readonly'}
                %div#slider-range

          .field-group
            %label
              Description *
              %small
                %p Describe all the actions in this step.
                %p If there are lot of actions, please consider breaking it down into multiple steps!
            .field-wrapper
              = text_area(:step, :description, value: s.description, data:{index: i})
            .field-wrapper
              #lesson_4.field-group.field-group--support.field-group--supporting-files
                %label.label--small
                  Supporting Documents and Media
                .field-wrapper
                  
                  .image-uploader-wrapper{ data: { endpoint: "#{step_file_path(id: @lesson_obj.id, step:@steps.first.id, attr: 'supporting_files')}" } }
                    .dropzone
                      %p 
                        Drag & drop files here - or click to browse 
                        %br .jpg, .png, .pdf
                  = file_field_tag 'supporting_files[]', multiple: true
                  
                  .files

        %fieldset
          %legend
            %h4 What is needed for this step?
          .field-group
            %label
              Materials
              %small What do they need?
            .field-wrapper
              -#@TODO repeat both
              - if s.materials.present?
                -s.materials.each do |m|
                  .clone-container.materials-container
                    .field--xs
                      = text_field(:step, :materials_number, multiple: true, data:{index: i, control:'key-pair', sub: 0}, placeholder: 'Qty', value: m["number"] )
                    .field--xl
                      = text_field(:step, :materials_value, multiple: true, data:{index: i, control:'key-pair', sub: 0}, placeholder: 'Enter item here', value: m["name"] )
              - else
                .clone-container.materials-container
                  .field--xs
                    = text_field(:step, :materials_number, multiple: true, data:{index: i, control:'key-pair', sub: 0}, placeholder: 'Qty' )
                  .field--xl
                    = text_field(:step, :materials_value, multiple: true, data:{index: i, control:'key-pair', sub: 0}, placeholder: 'Enter item here' )
              %small Press ↵ Return to add

          .field-group
            %label
              Tools
              %small List as many as needed
            .field-wrapper
              - if s.tools.present?
                - s.tools.each do |tool|
                  = text_field(:step, :tools, placeholder: 'Enter item here', multiple: true, data: { control:'key', index: i}, value: tool )
              - else
                = text_field(:step, :tools, placeholder: 'Enter item here', multiple: true, data: { control:'key', index: i} )
              %small Press ↵ Return to add

          .field-group
            %label
              Design Files
              %small files for step creation
            .field-wrapper.field-group--supporting-materials
              .image-uploader-wrapper{ data: { endpoint: "#{step_file_path(id: @lesson_obj.id, step:@steps.first.id, attr: 'supporting_materials')}" } }
                .dropzone
                  %p 
                    Drag & drop files here - or click to browse 
                    %br .jpg, .png, .pdf
              = file_field_tag 'supporting_materials[]', multiple: true
              .files

          .field-group
            %label
              External Links
              %small Anymore useful links
            .field-wrapper
              .clone-container
                - if s.external_links.present?
                  - s.external_links.each do |external|
                    = text_field(:step, :external_links, multiple: true, data: { control:'key', index: i}, value: external )
                - else
                  = text_field(:step, :external_links, multiple: true, data: { control:'key', index: i})
              %small Press ↵ Return to add


    %h3="Step #{@steps_array.count+1}"
    = button_tag 'Add new Step', class: "button button--highlight add-step"


  %footer
    .wrapped
      =link_to 'Back to details', lesson_new_path(id: @lesson_obj.id, form_step:3), class: 'button button--call'
      =link_to 'Add some outcomes', lesson_new_path(id: @lesson_obj.id, form_step:5), class: 'button button--call'

:javascript

  var ID_ARRAY = #{ raw @steps_array };
  var LESSON_ID = "#{@lesson_obj.id}";

  function resetEndpoints(){
    for(i = 0; i <= ID_ARRAY.length -1; i++){

      $('.lesson-step').eq(i).find('.image-uploader-wrapper').eq(0).attr('id','upload-'+ID_ARRAY[i]);
      $('.lesson-step').eq(i).find('.image-uploader-wrapper').eq(1).attr('id','upload-material-'+ID_ARRAY[i]);

      window.Scopes.lesson.nameTheEndpoint(LESSON_ID,ID_ARRAY[i],'files');
      window.Scopes.lesson.nameTheEndpoint(LESSON_ID,ID_ARRAY[i],'materials');

      window.Scopes.lesson.enableFileUploader('#' + $('.lesson-step').eq(i).find('.image-uploader-wrapper').eq(0).attr('id'));
      window.Scopes.lesson.enableFileUploader('#' + $('.lesson-step').eq(i).find('.image-uploader-wrapper').eq(1).attr('id'));
    }
  }

  $(document).on('turbolinks:load', function() {
    $('#steps-wrapper').on('focusout','input',function() {
      console.log('update');
      updateStep($(this).data("index"));
    });

    resetEndpoints();

  });

  /**
   * AJAX BELOW
   */



   function setSections(){
    for(i = 0; i <= ID_ARRAY.length; i++){
      // console.log(ID_ARRAY[i]);
      $('.lesson-step').eq(i).data("id", ID_ARRAY[i]);
      // console.log('updating');
    }
   }

   $('.add-step').click(function() {

      continueable = true;
      for(i = 0; i < $("[name='step[description]']").length; i++){
        if ($("[name='step[description]']").eq(i).val() == ""){
        continueable = false;
        }
      }  //return unless legnth of objects objects
      if (continueable == false) {
        return;
      }

      lst_index = $('.lesson-step').length;
      $elem = $('.lesson-step').last().clone(false,false);

      $elem.find("input").val('');
      $elem.find("input").text('');
      $elem.find("input").attr("data-index", ($('.lesson-step').length));

      $elem.find("textarea").val('');
      $elem.find("textarea").text('');
      $elem.find("textarea").attr("data-index", ($('.lesson-step').length));

      $elem.find(".remove-step").attr("data-index", ($('.lesson-step').length));
      $elem.attr("data-id", "");
      $elem.insertAfter($('.lesson-step').last());

      for(i = 0; i < $elem.find("[name='step[external_links][]']").length; i++){
        if (i > 0) {
          $elem.find("[name='step[external_links][]']").eq(i).remove();
        }
      }

      $('.add-step').siblings('h3').text('Step ' + ($('.lesson-step').length + 1));

      console.log($elem);
      $elem.find('.heading-wrapper').find('h4').text('Step ' + ($('.lesson-step').length));
      resetEndpoints();

  });

  function removeSectionAndUpdate(index){
    $('.lesson-step').eq(index).remove();
    for(i = 0; i < ID_ARRAY.length; i++){
      $elem = $('.lesson-step').eq(i);
      $elem.find("input").attr("data-index", i);
      $elem.find(".remove-step").attr("data-index", i);
      $elem.attr("data-id", ID_ARRAY[i]);

      $('.add-step').siblings('h3').text('Step ' + ($('.lesson-step').length + 1));
    }
  }

  $('.lesson--steps').on("click", '.remove-step', function(e){
        e.preventDefault();
        index = $(this).data('index');
        id_data = $('.lesson-step').eq(index).data('id');
        step_data = {id: id_data};
        parameters = {step: step_data};

        $.ajax({
          type: "DELETE",
          url: "/lessons/#{@lesson_obj.id}/steps",
          // The key needs to match your method's input parameter (case-sensitive).
         data: JSON.stringify(parameters),
          contentType: "application/json; charset=utf-8",
          dataType: "json",
          success: function(data){
            console.log(data);
            ID_ARRAY = data['ids'];
            removeSectionAndUpdate(index);
          },
          failure: function(errMsg) {
              alert(errMsg);
          }
      });
    });

   function updateStep(index){
      console.log('submit data for step: ' + index);
      // console.log(ID_ARRAY);

      summary_data = $("[name='step[summary]']").eq(index).val();
      //duration_data =
      // send as seconds in string

      description_data = $("[name='step[description]']").eq(index).val();

      resetEndpoints();


      materials_data = [];
      $(".materials-container").each(function(i){
        var quantity =  $(this).find("[name='step[materials_number][]']").first().val();
        var item = $(this).find("[name='step[materials_value][]']").first().val();
        materials_data.push({"number": quantity, "name": item });
      });





      tools_data = []
      $("[name='step[tools][]']").filter("[data-index=" + index + "]").each(function(i){
        tools_data.push($(this).val());
      });


      external_links_data = [];
      $("[name='step[external_links][]']").filter("[data-index=" + index + "]").each(function(i){
        external_links_data.push($(this).val());
      });
      console.log(external_links_data);



      id_data = $('.lesson-step').eq(index).data("id");

      step_data = [{id: id_data, summary: summary_data, description: description_data, external_links: external_links_data, tools: tools_data, materials: materials_data}];
      paramaters = {steps: step_data};
      console.log(step_data);


      $.ajax({
          type: "PUT",
          url: "/lessons/#{@lesson_obj.id}/steps",
          // The key needs to match your method's input parameter (case-sensitive).
         data: JSON.stringify(paramaters),
          contentType: "application/json; charset=utf-8",
          dataType: "json",
          success: function(data){
            console.log(data);
            ID_ARRAY = data['ids'];
            setSections();
          },
          failure: function(errMsg) {
              alert(errMsg);
          }
      });
  };

-# @TODO dont repeat your self DRY warning
%script#template-upload{:type => "text/html"}
  :plain
    {% for (var i=0, files=o.files, l=files.length, file=files[0]; i<l; file=files[++i]) { %}
      <span class="button button--file"><a href="{%=file.url%}">{%=file.name%}</a><a href="#" data-delete="{%=file.delete_url%}"><i class="icon-close"></i></a></span>
    {% } %}

%script#template-download{:type => "text/html"}
  :plain
    {% for (var i=0, files=o.files, l=files.length, file=files[0]; i<l; file=files[++i]) { %}
      <span class="button button--file"><a href="{%=file.url%}">{%=file.name%}</a><a href="#" data-delete="{%=file.delete_url%}"><i class="icon-close"></i></a></span>
    {% } %}